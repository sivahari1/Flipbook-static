generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String              @id @default(cuid())
  email                    String              @unique
  passwordHash             String
  role                     Role                @default(SUBSCRIBER)
  emailVerified            Boolean             @default(false)
  emailVerificationToken   String?             @unique
  emailVerificationExpires DateTime?
  stripeCustomerId         String?
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  documents                Document[]
  shares                   ShareLink[]
  subscription             Subscription?
  orders                   Order[]
  viewAudits               ViewAudit[]
  documentAccess           DocumentAccess[]
  pageAccess               PageAccess[]
  documentAccessLogs       DocumentAccessLog[]

  @@map("users")
}

model Subscription {
  id               String   @id @default(cuid())
  userId           String   @unique
  status           String
  currentPeriodEnd DateTime
  plan             String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Order {
  id               String      @id @default(cuid())
  userId           String
  planId           String
  amount           Float
  currency         String      @default("INR")
  status           OrderStatus @default(PENDING)
  razorpayOrderId  String?     @unique
  razorpayPaymentId String?    @unique
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model Document {
  id                String              @id @default(cuid())
  ownerId           String
  title             String
  description       String?
  pageCount         Int                 @default(0)
  hasPassphrase     Boolean             @default(false)
  passphraseHash    String?
  storageKey        String
  tilePrefix        String?
  drmOptions        String              @default("{}")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  // PDF Processing fields
  processedAt       DateTime?
  totalPages        Int?
  processingStatus  ProcessingStatus    @default(PENDING)
  textExtracted     Boolean             @default(false)
  fileSize          BigInt?
  mimeType          String?
  originalFilename  String?
  owner             User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  shareLinks        ShareLink[]
  viewAudits        ViewAudit[]
  documentAccess    DocumentAccess[]
  pageAccess        PageAccess[]
  // PDF Processing relations
  pdfPages          PDFPage[]
  textSearches      DocumentTextSearch[]
  processingJobs    PDFProcessingJob[]
  accessLogs        DocumentAccessLog[]

  @@map("documents")
}

model ShareLink {
  id             String      @id @default(cuid())
  documentId     String
  creatorId      String
  code           String      @unique
  expiresAt      DateTime?
  maxOpens       Int?
  openCount      Int         @default(0)
  ipLock         String?
  uaLock         String?
  requireOtp     Boolean     @default(false)
  lastOtpHash    String?
  requirePass    Boolean     @default(false)
  passphraseHint String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  creator        User        @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  document       Document    @relation(fields: [documentId], references: [id], onDelete: Cascade)
  viewAudits     ViewAudit[]

  @@map("share_links")
}

model ViewAudit {
  id          String     @id @default(cuid())
  userId      String?
  shareLinkId String?
  documentId  String
  ipHash      String
  uaHash      String
  sessionId   String
  event       String
  meta        String?
  createdAt   DateTime   @default(now())
  document    Document   @relation(fields: [documentId], references: [id], onDelete: Cascade)
  shareLink   ShareLink? @relation(fields: [shareLinkId], references: [id])
  user        User?      @relation(fields: [userId], references: [id])

  @@map("view_audits")
}

model DocumentAccess {
  id          String   @id @default(cuid())
  documentId  String
  userId      String
  accessTime  DateTime @default(now())
  ipAddress   String
  userAgent   String
  sessionId   String
  duration    Int?     // Duration in seconds
  pagesViewed Int      @default(0)
  violations  String   @default("[]") // JSON array of security violations
  document    Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("document_access")
}

model PageAccess {
  id         String   @id @default(cuid())
  documentId String
  userId     String
  pageNumber Int
  accessTime DateTime @default(now())
  sessionId  String
  renderTime Int?     // Time taken to render in milliseconds
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("page_access")
}

enum Role {
  ADMIN
  CREATOR
  SUBSCRIBER
}

enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum JobStatus {
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
}

enum AccessAction {
  VIEW
  SEARCH
  NAVIGATE
  DOWNLOAD
  SHARE
}

model PDFPage {
  id           String    @id @default(cuid())
  documentId   String
  pageNumber   Int
  imageUrl     String
  width        Int
  height       Int
  thumbnailUrl String?
  textContent  String?
  textBounds   Json?     // Store text positioning data as JSON
  createdAt    DateTime  @default(now())
  document     Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, pageNumber])
  @@map("pdf_pages")
}

model DocumentTextSearch {
  id             String   @id @default(cuid())
  documentId     String
  pageNumber     Int
  searchableText String
  wordPositions  Json?    // Store word positions for highlighting as JSON
  createdAt      DateTime @default(now())
  document       Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([documentId, pageNumber])
  @@map("document_text_search")
}

model PDFProcessingJob {
  id           String    @id @default(cuid())
  documentId   String
  status       JobStatus @default(QUEUED)
  progress     Int       @default(0)
  errorMessage String?
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  document     Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("pdf_processing_jobs")
}

model DocumentAccessLog {
  id         String       @id @default(cuid())
  userId     String?
  documentId String
  pageNumber Int?
  action     AccessAction
  ipAddress  String?
  userAgent  String?
  sessionId  String?
  timeSpent  Int?         // Time spent in seconds
  createdAt  DateTime     @default(now())
  document   Document     @relation(fields: [documentId], references: [id], onDelete: Cascade)
  user       User?        @relation(fields: [userId], references: [id])

  @@map("document_access_logs")
}
